import java.util.Random;
import java.util.Scanner;

public class Matrix {
    public static void main(String[] args) {

        /* TODO */
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int columns = sc.nextInt();

        int[][] matrix = inputMatrix(rows, columns, sc);
        System.out.println("Ma trận đã nhập:");
        printMatrix(matrix);

        int arr1[][] = inputMatrix(rows, columns, sc);
        int arr2[][] = inputMatrix(rows, columns, sc);
        int sumMatrix[][] = addMatrices(arr1, arr2);
        printMatrix(sumMatrix);

        printSumColumns(arr1);

        printUpperTriangularMatrix(arr1);

        int primes[] = getPrimesInUpperTriangularMatrix(matrix);
        sortArrayInAscendingOrderUsingSelectionSort(primes);
        printArray(primes);

    }

    /* Method to generate random matrix, used to test program */
    public static int[][] generateMatrix(int rows, int columns) {
        if ((rows <= 0) || (columns <= 0)) {
            return null;
        }

        Random randomGenerator = new Random();
        int[][] newMatrix = new int[rows][columns];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                newMatrix[i][j] = Math.abs(randomGenerator.nextInt()) % 100;
            }
        }

        return newMatrix;
    }

    /* Method to check valid matrix */
    public static boolean isValid(int[][] matrix) {
        if ((matrix == null) || (matrix.length == 0) || (matrix[0].length ==0)) {
            return false;
        }
        return true;
    }

    /* Method to check valid array */
    public static boolean isValid(int[] array) {
        if ((array == null) || (array.length == 0)) {
            return false;
        }

        return true;
    }

    public static void inputMatrix(int[][] matrix, Scanner keyboard) {
        if (!isValid(matrix)) {
            return;
        }

        /* TODO */
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j <matrix[0].length; j++) {
                matrix[i][j] = keyboard.nextInt();
            }
        }
    }

    public static int[][] inputMatrix(int rows, int columns, Scanner keyboard) {
        if ((rows <= 0) || (columns <= 0)) {
            return null;
        }
        int arr[][] = generateMatrix(rows, columns);
        inputMatrix(arr, keyboard);
        return arr;
        /* TODO */
    }

    /* Method to print a array */
    public static void printArray(int[] array) {
        if (!isValid(array)) {
            return;
        }

        StringBuilder arrayString = new StringBuilder();
        for (int elem : array) {
            arrayString.append(elem).append(" ");
        }
        System.out.print(arrayString.toString().trim());
    }

    /* Method to print a matrix (2d array) */
    public static void printMatrix(int[][] matrix) {
        if (!isValid(matrix)) {
            return;
        }

        StringBuilder stringRow = new StringBuilder();
        for (int[] row : matrix) {
            stringRow.setLength(0);
            for (int elem : row) {
                stringRow.append(elem).append(" ");
            }
            System.out.println(stringRow.toString().trim());
        }
    }

    /* Method to add 2 matrices */
    public static int[][] addMatrices(int[][] leftMatrix, int[][] rightMatrix) {
        if ((!isValid(leftMatrix)) || (!isValid(rightMatrix))) {
            return null;
        }

        if ((leftMatrix.length != rightMatrix.length)
                || (leftMatrix[0].length != rightMatrix[0].length)) {
            return null;
        }
        int arr[][] = new int[leftMatrix.length][leftMatrix[0].length];
        for (int i = 0; i < leftMatrix.length; i++) {
            for (int j = 0; j < leftMatrix[0].length; j++) {
                arr[i][j] = leftMatrix[i][j] + rightMatrix[i][j];
            }
        }
        /* TODO */
        return arr;
    }

    /* Method to sum columns of matrix */
    public static int[] sumColumns(int[][] matrix) {
        if (!isValid(matrix)) {
            return null;
        }

        /* TODO */
        int arr[] = new int[matrix[0].length];
        for (int i = 0; i < matrix[0].length; i++) {
            int sum = 0;
            for (int j = 0; j < matrix.length; j++) {
                sum += matrix[j][i];
            }
            arr[i] = sum;
        }
        return arr;
    }

    /* Method to print sum of columns of matrix */
    public static void printSumColumns(int[][] matrix) {
        int[] sumArray = sumColumns(matrix);
        printArray(sumArray);
    }

    /* Method to delete a column of matrix */
    public static int[][] deleteColumn(int[][] matrix, int index) {
        if (!isValid(matrix)) {
            return null;
        }

        if ((index < 0) || (index >= matrix[0].length)) {
            return matrix;
        }

        if (matrix[0].length == 1) {
            return null;
        }

        /* TODO */
        int arr[][] = new int[matrix.length][matrix[0].length - 1];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                if (j < index) {
                    arr[i][j] = matrix[i][j];
                } else {
                    arr[i][j] = matrix[i][j + 1];
                }
            }
        }
        return arr;
    }

    /* Method to print the matrix having a column deleted */
    public static void printDeleteColumnMatrix(int[][] matrix, int index) {
        int[][] deleteMatrix = deleteColumn(matrix, index);
        printMatrix(deleteMatrix);
    }

    /* Method to get upper triangular matrix of a matrix */
    public static int[][] getUpperTriangularMatrix(int[][] matrix) {
        if (!isValid(matrix)) {
            return null;
        }

        if (matrix.length != matrix[0].length) {
            return null;
        }

        /* TODO */
        int arr[][] = new int[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix[0].length; j++) {
                arr[i][j] = matrix[i][j];
            }
        }
        return arr;
    }

    /* Method to print upper triangular matrix of a matrix */
    public static void printUpperTriangularMatrix(int[][] matrix) {
        int[][] upperTriangularMatrix = getUpperTriangularMatrix(matrix);
        printMatrix(upperTriangularMatrix);
    }

    /* Method to check if a number is a prime */
    public static boolean isPrime(int number) {
        /* TODO */
        if (number < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0)
                return false;
        }
        return true;
    }

    /* Method to get all primes in upper triangular matrix of a matrix */
    public static int[] getPrimesInUpperTriangularMatrix(int[][] matrix) {
        /* TODO */
        int count = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix[0].length; j++) {
                if (isPrime(matrix[i][j])) {
                    count++;
                }
            }
        }

        int arr[] = new int[count];
        int k = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix[0].length; j++){
                if (isPrime(matrix[i][j])) {
                    arr[k] = matrix[i][j];
                    k++;
                }
            }
        }
        return arr;
    }

    /* Method to sort an array */
    public static void sortArrayInAscendingOrderUsingSelectionSort(int[] array) {
        if (!isValid(array)) {
            return;
        }

        int temp;
        int minIndex;
        for (int i = 0; i < array.length - 1; i++) {
            minIndex = i;
            // find index of the smallest element
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }

            // swap the smallest element and ith element
            if (minIndex != i) {
                temp = array[i];
                array[i] = array[minIndex];
                array[minIndex] = temp;
            }
        }
    }
}

